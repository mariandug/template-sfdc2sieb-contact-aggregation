<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and Siebel Contact Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
			<![CDATA[
I want to aggregate contacts from Salesforce and Oracle Siebel Business Objects (Siebel), compare them to see what contacts can only be found in one of the two and what contacts are in both instances. 

For practical purposes this Template will generate the result in the format of a CSV Report sent by email.

This Template should serve as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

As implemented, it gets contacts from Salesforce and Siebel, compares them by the email address of the contacts, and generates a CSV file which shows contacts in Salesforce, contacts in Siebel, and contacts in both Salesforce and Siebel. The report is then emailed to a configured group of email addresses.
]]>
		</section>
		<section id="considerations">
			<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failing to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="sieb_dst">
			<![CDATA[
In order to make the siebel connector work smoothly you have to provide the correct version of the siebel jars (Siebel.jar, SiebelJI_enu.jar) that works with your Siebel installation.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set and started, supposing you choose as domain name `template-sfdc2sieb-contact-aggregation` to trigger the use case you just need to hit `http://template-sfdc2sieb-contact-aggregation.cloudhub.io/generatereport` and report will be sent to the emails configured.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case you just need to hit the local HTTP listener with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/generatereport` and this will create a CSV report and send it to the mails set.
]]>
		</section>
		<section id="application_configuration">
			<![CDATA[
+ http.port `9090` 

### Salesforce Connector configuration
+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

### Oracle Siebel Connector configuration
+ sieb.user `user`
+ sieb.password `secret`
+ sieb.server `server`
+ sieb.serverName `serverName`
+ sieb.objectManager `objectManager`
+ sieb.port `2321`

### SMTP Services configuration
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `exampleuser@gmail.com`
+ smtp.password `ExamplePassword456`

### Mail details
+ mail.from `exampleuser@gmail.com`
+ mail.to `woody.guthrie@gmail.com`
+ mail.subject `SFDC Contacts Report`
+ mail.body `Contacts report comparing contacts from SFDC and Siebel Contacts`
+ attachment.name `OrderedReport.csv`
]]>
		</section>
		<section id="api_calls">
			<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. However, we make API call to Salesforce only once during aggregation. 
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will found the endpoint to start the aggregation. This Template has an HTTP Inbound Endpoint as the way to trigger the use case.
$H$H# Trigger Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented in this XML, directed by one flow responsible of conducting the aggregation of data, comparing records and finally formatting the output, in this case a report.

Using Scatter-Gather component we are querying the data in different systems. After that the aggregation is implemented in DataWeave 2 script using Transform component. Aggregated results are sorted by source of existence:

1. Contacts only in Salesforce
2. Contacts only in Siebel
3. Contacts in both Salesforce and Siebel

and transformed to CSV format. Final report in CSV format is sent to email, that you configured in mule.\*.properties file. 
Contacts will be matched by email address, that is to say, a record in both organisations with same email address is considered the same contact. 
]]>
		</section>
	</sections>
</configuration>